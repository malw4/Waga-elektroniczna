
tensorek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004660  08004660  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080046d8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080046d8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b23d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3f  00000000  00000000  0002b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002622b  00000000  00000000  0002dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f54  00000000  00000000  00054223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea025  00000000  00000000  0005e177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014819c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  001481f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045b0 	.word	0x080045b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080045b0 	.word	0x080045b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_ldivmod>:
 800089c:	b97b      	cbnz	r3, 80008be <__aeabi_ldivmod+0x22>
 800089e:	b972      	cbnz	r2, 80008be <__aeabi_ldivmod+0x22>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bfbe      	ittt	lt
 80008a4:	2000      	movlt	r0, #0
 80008a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008aa:	e006      	blt.n	80008ba <__aeabi_ldivmod+0x1e>
 80008ac:	bf08      	it	eq
 80008ae:	2800      	cmpeq	r0, #0
 80008b0:	bf1c      	itt	ne
 80008b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008b6:	f04f 30ff 	movne.w	r0, #4294967295
 80008ba:	f000 b9b9 	b.w	8000c30 <__aeabi_idiv0>
 80008be:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c6:	2900      	cmp	r1, #0
 80008c8:	db09      	blt.n	80008de <__aeabi_ldivmod+0x42>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db1a      	blt.n	8000904 <__aeabi_ldivmod+0x68>
 80008ce:	f000 f84d 	bl	800096c <__udivmoddi4>
 80008d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008da:	b004      	add	sp, #16
 80008dc:	4770      	bx	lr
 80008de:	4240      	negs	r0, r0
 80008e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db1b      	blt.n	8000920 <__aeabi_ldivmod+0x84>
 80008e8:	f000 f840 	bl	800096c <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4240      	negs	r0, r0
 80008f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008fc:	4252      	negs	r2, r2
 80008fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000902:	4770      	bx	lr
 8000904:	4252      	negs	r2, r2
 8000906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800090a:	f000 f82f 	bl	800096c <__udivmoddi4>
 800090e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000916:	b004      	add	sp, #16
 8000918:	4240      	negs	r0, r0
 800091a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091e:	4770      	bx	lr
 8000920:	4252      	negs	r2, r2
 8000922:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000926:	f000 f821 	bl	800096c <__udivmoddi4>
 800092a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000932:	b004      	add	sp, #16
 8000934:	4252      	negs	r2, r2
 8000936:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800093a:	4770      	bx	lr

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b96e 	b.w	8000c30 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	4604      	mov	r4, r0
 8000974:	468c      	mov	ip, r1
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8083 	bne.w	8000a82 <__udivmoddi4+0x116>
 800097c:	428a      	cmp	r2, r1
 800097e:	4617      	mov	r7, r2
 8000980:	d947      	bls.n	8000a12 <__udivmoddi4+0xa6>
 8000982:	fab2 f282 	clz	r2, r2
 8000986:	b142      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000988:	f1c2 0020 	rsb	r0, r2, #32
 800098c:	fa24 f000 	lsr.w	r0, r4, r0
 8000990:	4091      	lsls	r1, r2
 8000992:	4097      	lsls	r7, r2
 8000994:	ea40 0c01 	orr.w	ip, r0, r1
 8000998:	4094      	lsls	r4, r2
 800099a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800099e:	0c23      	lsrs	r3, r4, #16
 80009a0:	fbbc f6f8 	udiv	r6, ip, r8
 80009a4:	fa1f fe87 	uxth.w	lr, r7
 80009a8:	fb08 c116 	mls	r1, r8, r6, ip
 80009ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b0:	fb06 f10e 	mul.w	r1, r6, lr
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x60>
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80009be:	f080 8119 	bcs.w	8000bf4 <__udivmoddi4+0x288>
 80009c2:	4299      	cmp	r1, r3
 80009c4:	f240 8116 	bls.w	8000bf4 <__udivmoddi4+0x288>
 80009c8:	3e02      	subs	r6, #2
 80009ca:	443b      	add	r3, r7
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d4:	fb08 3310 	mls	r3, r8, r0, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d909      	bls.n	80009f8 <__udivmoddi4+0x8c>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ea:	f080 8105 	bcs.w	8000bf8 <__udivmoddi4+0x28c>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	f240 8102 	bls.w	8000bf8 <__udivmoddi4+0x28c>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fc:	eba4 040e 	sub.w	r4, r4, lr
 8000a00:	2600      	movs	r6, #0
 8000a02:	b11d      	cbz	r5, 8000a0c <__udivmoddi4+0xa0>
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	2300      	movs	r3, #0
 8000a08:	e9c5 4300 	strd	r4, r3, [r5]
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	b902      	cbnz	r2, 8000a16 <__udivmoddi4+0xaa>
 8000a14:	deff      	udf	#255	; 0xff
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d150      	bne.n	8000ac0 <__udivmoddi4+0x154>
 8000a1e:	1bcb      	subs	r3, r1, r7
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	2601      	movs	r6, #1
 8000a2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a2e:	0c21      	lsrs	r1, r4, #16
 8000a30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb08 f30c 	mul.w	r3, r8, ip
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0xe4>
 8000a40:	1879      	adds	r1, r7, r1
 8000a42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0xe2>
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	f200 80e9 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a4e:	4684      	mov	ip, r0
 8000a50:	1ac9      	subs	r1, r1, r3
 8000a52:	b2a3      	uxth	r3, r4
 8000a54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a60:	fb08 f800 	mul.w	r8, r8, r0
 8000a64:	45a0      	cmp	r8, r4
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x10c>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x10a>
 8000a70:	45a0      	cmp	r8, r4
 8000a72:	f200 80d9 	bhi.w	8000c28 <__udivmoddi4+0x2bc>
 8000a76:	4618      	mov	r0, r3
 8000a78:	eba4 0408 	sub.w	r4, r4, r8
 8000a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a80:	e7bf      	b.n	8000a02 <__udivmoddi4+0x96>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0x12e>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f000 80b1 	beq.w	8000bee <__udivmoddi4+0x282>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a92:	4630      	mov	r0, r6
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f683 	clz	r6, r3
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d14a      	bne.n	8000b38 <__udivmoddi4+0x1cc>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0x140>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80b8 	bhi.w	8000c1c <__udivmoddi4+0x2b0>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0103 	sbc.w	r1, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0a8      	beq.n	8000a0c <__udivmoddi4+0xa0>
 8000aba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000abe:	e7a5      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac8:	4097      	lsls	r7, r2
 8000aca:	fa01 f002 	lsl.w	r0, r1, r2
 8000ace:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad2:	40d9      	lsrs	r1, r3
 8000ad4:	4330      	orrs	r0, r6
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae8:	fb06 f108 	mul.w	r1, r6, r8
 8000aec:	4299      	cmp	r1, r3
 8000aee:	fa04 f402 	lsl.w	r4, r4, r2
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x19c>
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000afa:	f080 808d 	bcs.w	8000c18 <__udivmoddi4+0x2ac>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 808a 	bls.w	8000c18 <__udivmoddi4+0x2ac>
 8000b04:	3e02      	subs	r6, #2
 8000b06:	443b      	add	r3, r7
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b281      	uxth	r1, r0
 8000b0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b18:	fb00 f308 	mul.w	r3, r0, r8
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x1c4>
 8000b20:	1879      	adds	r1, r7, r1
 8000b22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b26:	d273      	bcs.n	8000c10 <__udivmoddi4+0x2a4>
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d971      	bls.n	8000c10 <__udivmoddi4+0x2a4>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	4439      	add	r1, r7
 8000b30:	1acb      	subs	r3, r1, r3
 8000b32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b36:	e778      	b.n	8000a2a <__udivmoddi4+0xbe>
 8000b38:	f1c6 0c20 	rsb	ip, r6, #32
 8000b3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b44:	431c      	orrs	r4, r3
 8000b46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b56:	431f      	orrs	r7, r3
 8000b58:	0c3b      	lsrs	r3, r7, #16
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fa1f f884 	uxth.w	r8, r4
 8000b62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b6e:	458a      	cmp	sl, r1
 8000b70:	fa02 f206 	lsl.w	r2, r2, r6
 8000b74:	fa00 f306 	lsl.w	r3, r0, r6
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x220>
 8000b7a:	1861      	adds	r1, r4, r1
 8000b7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b80:	d248      	bcs.n	8000c14 <__udivmoddi4+0x2a8>
 8000b82:	458a      	cmp	sl, r1
 8000b84:	d946      	bls.n	8000c14 <__udivmoddi4+0x2a8>
 8000b86:	f1a9 0902 	sub.w	r9, r9, #2
 8000b8a:	4421      	add	r1, r4
 8000b8c:	eba1 010a 	sub.w	r1, r1, sl
 8000b90:	b2bf      	uxth	r7, r7
 8000b92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ba2:	45b8      	cmp	r8, r7
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x24a>
 8000ba6:	19e7      	adds	r7, r4, r7
 8000ba8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bac:	d22e      	bcs.n	8000c0c <__udivmoddi4+0x2a0>
 8000bae:	45b8      	cmp	r8, r7
 8000bb0:	d92c      	bls.n	8000c0c <__udivmoddi4+0x2a0>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4427      	add	r7, r4
 8000bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bba:	eba7 0708 	sub.w	r7, r7, r8
 8000bbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	46c6      	mov	lr, r8
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	d31a      	bcc.n	8000c00 <__udivmoddi4+0x294>
 8000bca:	d017      	beq.n	8000bfc <__udivmoddi4+0x290>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x27a>
 8000bce:	ebb3 020e 	subs.w	r2, r3, lr
 8000bd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bda:	40f2      	lsrs	r2, r6
 8000bdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000be0:	40f7      	lsrs	r7, r6
 8000be2:	e9c5 2700 	strd	r2, r7, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e70b      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e9      	b.n	80009cc <__udivmoddi4+0x60>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6fd      	b.n	80009f8 <__udivmoddi4+0x8c>
 8000bfc:	4543      	cmp	r3, r8
 8000bfe:	d2e5      	bcs.n	8000bcc <__udivmoddi4+0x260>
 8000c00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c04:	eb69 0104 	sbc.w	r1, r9, r4
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7df      	b.n	8000bcc <__udivmoddi4+0x260>
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e7d2      	b.n	8000bb6 <__udivmoddi4+0x24a>
 8000c10:	4660      	mov	r0, ip
 8000c12:	e78d      	b.n	8000b30 <__udivmoddi4+0x1c4>
 8000c14:	4681      	mov	r9, r0
 8000c16:	e7b9      	b.n	8000b8c <__udivmoddi4+0x220>
 8000c18:	4666      	mov	r6, ip
 8000c1a:	e775      	b.n	8000b08 <__udivmoddi4+0x19c>
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e74a      	b.n	8000ab6 <__udivmoddi4+0x14a>
 8000c20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c24:	4439      	add	r1, r7
 8000c26:	e713      	b.n	8000a50 <__udivmoddi4+0xe4>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	e724      	b.n	8000a78 <__udivmoddi4+0x10c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	607b      	str	r3, [r7, #4]
  while (delay > 0){
 8000c3e:	e002      	b.n	8000c46 <hx711_delay_us+0x12>
    delay--;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  while (delay > 0){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f9      	bne.n	8000c40 <hx711_delay_us+0xc>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000c62:	e002      	b.n	8000c6a <hx711_lock+0x10>
    hx711_delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fcad 	bl	80015c4 <HAL_Delay>
  while (hx711->lock)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7d1b      	ldrb	r3, [r3, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f8      	bne.n	8000c64 <hx711_lock+0xa>
  hx711->lock = 1;      
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	751a      	strb	r2, [r3, #20]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	751a      	strb	r2, [r3, #20]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b08a      	sub	sp, #40	; 0x28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff ffd5 	bl	8000c5a <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000cc6:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	68b8      	ldr	r0, [r7, #8]
 8000cf0:	f000 fd72 	bl	80017d8 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000d00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6838      	ldr	r0, [r7, #0]
 8000d0c:	f000 fd64 	bl	80017d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f000 ff1e 	bl	8001b5c <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000d20:	200a      	movs	r0, #10
 8000d22:	f000 fc4f 	bl	80015c4 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	891b      	ldrh	r3, [r3, #8]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f000 ff13 	bl	8001b5c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8000d36:	200a      	movs	r0, #10
 8000d38:	f000 fc44 	bl	80015c4 <HAL_Delay>
  hx711_value(hx711);
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f000 f80a 	bl	8000d56 <hx711_value>
  hx711_value(hx711);
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f807 	bl	8000d56 <hx711_value>
  hx711_unlock(hx711); 
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff ff99 	bl	8000c80 <hx711_unlock>
}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8000d62:	f000 fc23 	bl	80015ac <HAL_GetTick>
 8000d66:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000d68:	e00b      	b.n	8000d82 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 fc2a 	bl	80015c4 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8000d70:	f000 fc1c 	bl	80015ac <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b96      	cmp	r3, #150	; 0x96
 8000d7c:	d901      	bls.n	8000d82 <hx711_value+0x2c>
      return 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e055      	b.n	8000e2e <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	895b      	ldrh	r3, [r3, #10]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f000 fecd 	bl	8001b2c <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d0e8      	beq.n	8000d6a <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	74fb      	strb	r3, [r7, #19]
 8000d9c:	e02a      	b.n	8000df4 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4619      	mov	r1, r3
 8000daa:	f000 fed7 	bl	8001b5c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000dae:	f7ff ff41 	bl	8000c34 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	891b      	ldrh	r3, [r3, #8]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f000 fecd 	bl	8001b5c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000dc2:	f7ff ff37 	bl	8000c34 <hx711_delay_us>
    data = data << 1;    
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	f000 fea8 	bl	8001b2c <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <hx711_value+0x92>
      data ++;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8000de8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	74fb      	strb	r3, [r7, #19]
 8000df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000df8:	2b17      	cmp	r3, #23
 8000dfa:	ddd0      	ble.n	8000d9e <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000e02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	891b      	ldrh	r3, [r3, #8]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f000 fea4 	bl	8001b5c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000e14:	f7ff ff0e 	bl	8000c34 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	891b      	ldrh	r3, [r3, #8]
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	f000 fe9a 	bl	8001b5c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000e28:	f7ff ff04 	bl	8000c34 <hx711_delay_us>
  return data;    
 8000e2c:	697b      	ldr	r3, [r7, #20]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8000e36:	b5b0      	push	{r4, r5, r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff09 	bl	8000c5a <hx711_lock>
  int64_t  ave = 0;
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	81fb      	strh	r3, [r7, #14]
 8000e58:	e013      	b.n	8000e82 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff7b 	bl	8000d56 <hx711_value>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e6c:	1884      	adds	r4, r0, r2
 8000e6e:	eb41 0503 	adc.w	r5, r1, r3
 8000e72:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8000e76:	2005      	movs	r0, #5
 8000e78:	f000 fba4 	bl	80015c4 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	81fb      	strh	r3, [r7, #14]
 8000e82:	89fa      	ldrh	r2, [r7, #14]
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3e7      	bcc.n	8000e5a <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e94:	f7ff fd02 	bl	800089c <__aeabi_ldivmod>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff feed 	bl	8000c80 <hx711_unlock>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdb0      	pop	{r4, r5, r7, pc}

08000eae <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8000eae:	b5b0      	push	{r4, r5, r7, lr}
 8000eb0:	b088      	sub	sp, #32
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fecd 	bl	8000c5a <hx711_lock>
  int64_t  ave = 0;
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	82fb      	strh	r3, [r7, #22]
 8000ed0:	e013      	b.n	8000efa <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff3f 	bl	8000d56 <hx711_value>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000ee0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ee4:	1884      	adds	r4, r0, r2
 8000ee6:	eb41 0503 	adc.w	r5, r1, r3
 8000eea:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f000 fb68 	bl	80015c4 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]
 8000efa:	8afa      	ldrh	r2, [r7, #22]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3e7      	bcc.n	8000ed2 <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f0c:	f7ff fcc6 	bl	800089c <__aeabi_ldivmod>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4613      	mov	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f32:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fea2 	bl	8000c80 <hx711_unlock>
  return answer;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	ee07 3a90 	vmov	s15, r3
}
 8000f42:	eeb0 0a67 	vmov.f32	s0, s15
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	611a      	str	r2, [r3, #16]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fab2 	bl	80014da <HAL_Init>
   GPIO_InitTypeDef gpio;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f8b3 	bl	80010e0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f947 	bl	800120c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 f915 	bl	80011ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_GPIO_Init();
 8000f82:	f000 f943 	bl	800120c <MX_GPIO_Init>
  const char message[] = "0\r\n";
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <main+0x144>)
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char message2[] = "1\r\n";
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <main+0x148>)
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  const char message4[24];
  const char message3[] = "2\r\n";
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <main+0x14c>)
 8000f90:	60fb      	str	r3, [r7, #12]
  const char message5[] = "jetem tu\r\n";
 8000f92:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <main+0x150>)
 8000f94:	463b      	mov	r3, r7
 8000f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f98:	c303      	stmia	r3!, {r0, r1}
 8000f9a:	801a      	strh	r2, [r3, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	0c12      	lsrs	r2, r2, #16
 8000fa0:	701a      	strb	r2, [r3, #0]

  int pom=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  int weight1, weight2;
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f910 	bl	80001d0 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	4840      	ldr	r0, [pc, #256]	; (80010c0 <main+0x154>)
 8000fbe:	f002 f93f 	bl	8003240 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2,&connector,3,HAL_MAX_DELAY);
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	493e      	ldr	r1, [pc, #248]	; (80010c4 <main+0x158>)
 8000fca:	483d      	ldr	r0, [pc, #244]	; (80010c0 <main+0x154>)
 8000fcc:	f002 f9cc 	bl	8003368 <HAL_UART_Receive>
	 // HAL_UART_Transmit(&huart2,&connector,1,HAL_MAX_DELAY);
	  if(strncmp(connector,message2,1)==0){
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <main+0x158>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f1      	bne.n	8000fc2 <main+0x56>
		  hx711_init(&loadcell, PIN_ZEGAR_GPIO_Port, PIN_ZEGAR_Pin, PIN_DANYCH_GPIO_Port, PIN_DANYCH_Pin);
 8000fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <main+0x15c>)
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	4937      	ldr	r1, [pc, #220]	; (80010c8 <main+0x15c>)
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <main+0x160>)
 8000fee:	f7ff fe54 	bl	8000c9a <hx711_init>
		    hx711_coef_set(&loadcell, 354.5); // read afer calibration
 8000ff2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80010d0 <main+0x164>
 8000ff6:	4835      	ldr	r0, [pc, #212]	; (80010cc <main+0x160>)
 8000ff8:	f7ff ffa8 	bl	8000f4c <hx711_coef_set>
		    hx711_tare(&loadcell, 10);
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	4833      	ldr	r0, [pc, #204]	; (80010cc <main+0x160>)
 8001000:	f7ff ff19 	bl	8000e36 <hx711_tare>
		    HAL_Delay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f000 fadc 	bl	80015c4 <HAL_Delay>
		    weight = hx711_weight(&loadcell, 10);
 800100c:	210a      	movs	r1, #10
 800100e:	482f      	ldr	r0, [pc, #188]	; (80010cc <main+0x160>)
 8001010:	f7ff ff4d 	bl	8000eae <hx711_weight>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <main+0x168>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
		    weight2 = (int) (weight);
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <main+0x168>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
		    while (1){
		    	HAL_Delay(500);
 800102e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001032:	f000 fac7 	bl	80015c4 <HAL_Delay>
		        weight = hx711_weight(&loadcell, 10);
 8001036:	210a      	movs	r1, #10
 8001038:	4824      	ldr	r0, [pc, #144]	; (80010cc <main+0x160>)
 800103a:	f7ff ff38 	bl	8000eae <hx711_weight>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <main+0x168>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
		    	weight1 = (int) ((weight)-weight2)*3.5;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <main+0x168>)
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001060:	ee17 0a90 	vmov	r0, s15
 8001064:	f7ff fb88 	bl	8000778 <__aeabi_i2d>
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <main+0x16c>)
 800106e:	f7ff f907 	bl	8000280 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fbe7 	bl	800084c <__aeabi_d2iz>
 800107e:	4603      	mov	r3, r0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
		        sprintf(message4,"%d\r\n",weight1);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001088:	4914      	ldr	r1, [pc, #80]	; (80010dc <main+0x170>)
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fe62 	bl	8003d54 <siprintf>
		        HAL_UART_Transmit(&huart2, (uint8_t*)message4, strlen(message4), HAL_MAX_DELAY);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f89b 	bl	80001d0 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f107 0110 	add.w	r1, r7, #16
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <main+0x154>)
 80010a8:	f002 f8ca 	bl	8003240 <HAL_UART_Transmit>
		    	HAL_Delay(500);
 80010ac:	e7bf      	b.n	800102e <main+0xc2>
 80010ae:	bf00      	nop
 80010b0:	000a0d30 	.word	0x000a0d30
 80010b4:	000a0d31 	.word	0x000a0d31
 80010b8:	000a0d32 	.word	0x000a0d32
 80010bc:	080045d0 	.word	0x080045d0
 80010c0:	200000e4 	.word	0x200000e4
 80010c4:	200000c4 	.word	0x200000c4
 80010c8:	48000400 	.word	0x48000400
 80010cc:	200000a0 	.word	0x200000a0
 80010d0:	43b14000 	.word	0x43b14000
 80010d4:	20000168 	.word	0x20000168
 80010d8:	400c0000 	.word	0x400c0000
 80010dc:	080045c8 	.word	0x080045c8

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b8      	sub	sp, #224	; 0xe0
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fe28 	bl	8003d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2288      	movs	r2, #136	; 0x88
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fe1a 	bl	8003d44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001110:	2310      	movs	r3, #16
 8001112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fd8e 	bl	8001c54 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800113e:	f000 f8a5 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f95a 	bl	8002420 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001172:	f000 f88b 	bl	800128c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001176:	2302      	movs	r3, #2
 8001178:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fb53 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800118c:	f000 f87e 	bl	800128c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001194:	f000 fd08 	bl	8001ba8 <HAL_PWREx_ControlVoltageScaling>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800119e:	f000 f875 	bl	800128c <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	37e0      	adds	r7, #224	; 0xe0
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_USART2_UART_Init+0x5c>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011f0:	f001 ffd8 	bl	80031a4 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011fa:	f000 f847 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000e4 	.word	0x200000e4
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_GPIO_Init+0x78>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_GPIO_Init+0x78>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_GPIO_Init+0x78>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_GPIO_Init+0x78>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <MX_GPIO_Init+0x78>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_GPIO_Init+0x78>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_ZEGAR_Pin|PIN_DANYCH_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_GPIO_Init+0x7c>)
 800125a:	f000 fc7f 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_ZEGAR_Pin PIN_DANYCH_Pin */
  GPIO_InitStruct.Pin = PIN_ZEGAR_Pin|PIN_DANYCH_Pin;
 800125e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_GPIO_Init+0x7c>)
 8001278:	f000 faae 	bl	80017d8 <HAL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x44>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x44>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6593      	str	r3, [r2, #88]	; 0x58
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_UART_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d128      	bne.n	8001354 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x80>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_UART_MspInit+0x80>)
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x80>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x80>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_UART_MspInit+0x80>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_UART_MspInit+0x80>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001332:	230c      	movs	r3, #12
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001342:	2307      	movs	r3, #7
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fa42 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400
 8001360:	40021000 	.word	0x40021000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f8e8 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f002 fc82 	bl	8003cf0 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20018000 	.word	0x20018000
 8001418:	00000400 	.word	0x00000400
 800141c:	2000008c 	.word	0x2000008c
 8001420:	20000180 	.word	0x20000180

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <SystemInit+0x5c>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <SystemInit+0x5c>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <SystemInit+0x60>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <SystemInit+0x60>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <SystemInit+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <SystemInit+0x60>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <SystemInit+0x60>)
 8001450:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001454:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001458:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <SystemInit+0x60>)
 800145c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001460:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SystemInit+0x60>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <SystemInit+0x60>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SystemInit+0x60>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	40021000 	.word	0x40021000

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff ffca 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001490:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
	ldr	r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LoopForever+0x16>)
	cmp	r2, r3
 80014b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f002 fc21 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff fd57 	bl	8000f6c <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014c4:	08004668 	.word	0x08004668
	ldr	r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014cc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80014d0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80014d4:	20000180 	.word	0x20000180

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>

080014da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f943 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f80e 	bl	800150c <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	e001      	b.n	8001500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fc:	f7ff fecc 	bl	8001298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001500:	79fb      	ldrb	r3, [r7, #7]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d023      	beq.n	8001568 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_InitTick+0x70>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x6c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f941 	bl	80017be <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d809      	bhi.n	800155c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f919 	bl	8001786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_InitTick+0x74>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e007      	b.n	800156c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e001      	b.n	800156c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000016c 	.word	0x2000016c

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000016c 	.word	0x2000016c

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff47 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff5c 	bl	8001654 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff8e 	bl	80016c4 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffb0 	bl	800172c <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e6:	e17f      	b.n	8001ae8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8171 	beq.w	8001ae2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00b      	beq.n	8001820 <HAL_GPIO_Init+0x48>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001814:	2b11      	cmp	r3, #17
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b12      	cmp	r3, #18
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d118      	bne.n	80018c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x128>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80ac 	beq.w	8001ae2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_GPIO_Init+0x330>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	4a5e      	ldr	r2, [pc, #376]	; (8001b08 <HAL_GPIO_Init+0x330>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6613      	str	r3, [r2, #96]	; 0x60
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_GPIO_Init+0x330>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_GPIO_Init+0x334>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x242>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x338>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x23e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_GPIO_Init+0x33c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x23a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_GPIO_Init+0x340>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x236>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x344>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x232>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_GPIO_Init+0x348>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x22e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4a      	ldr	r2, [pc, #296]	; (8001b24 <HAL_GPIO_Init+0x34c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x22a>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e00c      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00a      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a06:	2305      	movs	r3, #5
 8001a08:	e008      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e004      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x244>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	f002 0203 	and.w	r2, r2, #3
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4093      	lsls	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a2c:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5e:	4a32      	ldr	r2, [pc, #200]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a88:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_GPIO_Init+0x350>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f ae78 	bne.w	80017e8 <HAL_GPIO_Init+0x10>
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000c00 	.word	0x48000c00
 8001b1c:	48001000 	.word	0x48001000
 8001b20:	48001400 	.word	0x48001400
 8001b24:	48001800 	.word	0x48001800
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb6:	d130      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d038      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	e002      	b.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d102      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f2      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d110      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00f      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d007      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e3d4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c66:	4ba1      	ldr	r3, [pc, #644]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c70:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80e4 	beq.w	8001e50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4a>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	f040 808b 	bne.w	8001dac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	f040 8087 	bne.w	8001dac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9e:	4b93      	ldr	r3, [pc, #588]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e3ac      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x7c>
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cce:	e005      	b.n	8001cdc <HAL_RCC_OscConfig+0x88>
 8001cd0:	4b86      	ldr	r3, [pc, #536]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d223      	bcs.n	8001d28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fd41 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e38d      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4b7d      	ldr	r3, [pc, #500]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7c      	ldr	r2, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b7a      	ldr	r3, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4977      	ldr	r1, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4972      	ldr	r1, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e025      	b.n	8001d74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6f      	ldr	r2, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	496a      	ldr	r1, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	4965      	ldr	r1, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fd01 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e34d      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d74:	f000 fc36 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	495a      	ldr	r1, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x29c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x2a0>)
 8001d92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x2a4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fbb7 	bl	800150c <HAL_InitTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d052      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	e331      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d032      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fbf4 	bl	80015ac <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fbf0 	bl	80015ac <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e31a      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	493b      	ldr	r1, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e01a      	b.n	8001e50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fbc1 	bl	80015ac <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fbbd 	bl	80015ac <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e2e7      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1da>
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d074      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x21a>
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d10e      	bne.n	8001e86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d064      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d160      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e2c4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x24a>
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e01d      	b.n	8001eda <HAL_RCC_OscConfig+0x286>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x26e>
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x286>
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb63 	bl	80015ac <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080045dc 	.word	0x080045dc
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fb56 	bl	80015ac <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e280      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4baf      	ldr	r3, [pc, #700]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x2a8>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fb46 	bl	80015ac <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fb42 	bl	80015ac <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e26c      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	4ba5      	ldr	r3, [pc, #660]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2d0>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d060      	beq.n	8002014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x310>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d116      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	4b99      	ldr	r3, [pc, #612]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x328>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e249      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b93      	ldr	r3, [pc, #588]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	4990      	ldr	r1, [pc, #576]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	e040      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d023      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9a:	4b8c      	ldr	r3, [pc, #560]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a8b      	ldr	r2, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fb01 	bl	80015ac <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fafd 	bl	80015ac <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e227      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	497c      	ldr	r1, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e018      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a79      	ldr	r2, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fadd 	bl	80015ac <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fad9 	bl	80015ac <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e203      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff fab8 	bl	80015ac <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fab4 	bl	80015ac <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1de      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x3ec>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fa9b 	bl	80015ac <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff fa97 	bl	80015ac <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1c1      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80a6 	beq.w	80021f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a43      	ldr	r2, [pc, #268]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d118      	bne.n	8002112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa5e 	bl	80015ac <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7ff fa5a 	bl	80015ac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e184      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x4d8>
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212a:	e024      	b.n	8002176 <HAL_RCC_OscConfig+0x522>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d110      	bne.n	8002156 <HAL_RCC_OscConfig+0x502>
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	e00f      	b.n	8002176 <HAL_RCC_OscConfig+0x522>
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff fa15 	bl	80015ac <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff fa11 	bl	80015ac <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e139      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ed      	beq.n	8002186 <HAL_RCC_OscConfig+0x532>
 80021aa:	e01a      	b.n	80021e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f9fe 	bl	80015ac <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff f9fa 	bl	80015ac <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d906      	bls.n	80021d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e122      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	4b90      	ldr	r3, [pc, #576]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e8      	bne.n	80021b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b8b      	ldr	r3, [pc, #556]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a8a      	ldr	r2, [pc, #552]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8108 	beq.w	800240e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 80d0 	bne.w	80023a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002208:	4b83      	ldr	r3, [pc, #524]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	429a      	cmp	r2, r3
 800221a:	d130      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	3b01      	subs	r3, #1
 8002228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d127      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002238:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d11f      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002248:	2a07      	cmp	r2, #7
 800224a:	bf14      	ite	ne
 800224c:	2201      	movne	r2, #1
 800224e:	2200      	moveq	r2, #0
 8002250:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002252:	4293      	cmp	r3, r2
 8002254:	d113      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d06e      	beq.n	800235c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d069      	beq.n	8002358 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002284:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b7      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ac:	f7ff f97e 	bl	80015ac <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f97a 	bl	80015ac <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0a4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x7c8>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022e2:	3a01      	subs	r2, #1
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ec:	0212      	lsls	r2, r2, #8
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	3a01      	subs	r2, #1
 80022f8:	0552      	lsls	r2, r2, #21
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002300:	0852      	lsrs	r2, r2, #1
 8002302:	3a01      	subs	r2, #1
 8002304:	0652      	lsls	r2, r2, #25
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800230c:	0912      	lsrs	r2, r2, #4
 800230e:	0452      	lsls	r2, r2, #17
 8002310:	430a      	orrs	r2, r1
 8002312:	4941      	ldr	r1, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002330:	f7ff f93c 	bl	80015ac <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff f938 	bl	80015ac <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e062      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002356:	e05a      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e059      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235c:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d152      	bne.n	800240e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002380:	f7ff f914 	bl	80015ac <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7ff f910 	bl	80015ac <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e03a      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x734>
 80023a6:	e032      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d02d      	beq.n	800240a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7ff f8e3 	bl	80015ac <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff f8df 	bl	80015ac <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e009      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x796>
 8002408:	e001      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	f99d808c 	.word	0xf99d808c

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4961      	ldr	r1, [pc, #388]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04c      	beq.n	800250a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d121      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e09e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e092      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e086      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	493f      	ldr	r1, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7ff f867 	bl	80015ac <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7ff f863 	bl	80015ac <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e066      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 020c 	and.w	r2, r3, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d210      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e036      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002596:	f000 f825 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490c      	ldr	r1, [pc, #48]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ffa6 	bl	800150c <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c4:	7afb      	ldrb	r3, [r7, #11]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080045dc 	.word	0x080045dc
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d121      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d11e      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e005      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002640:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002654:	e00a      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d102      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e004      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d101      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800266a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d134      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0xa6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xac>
 8002688:	e005      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002692:	617b      	str	r3, [r7, #20]
      break;
 8002694:	e002      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	3301      	adds	r3, #1
 80026a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	fb02 f203 	mul.w	r2, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0e5b      	lsrs	r3, r3, #25
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	3301      	adds	r3, #1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026dc:	69bb      	ldr	r3, [r7, #24]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080045f4 	.word	0x080045f4
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	080045ec 	.word	0x080045ec

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002744:	f7ff ffda 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	080045ec 	.word	0x080045ec

0800276c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002784:	f7ff fa02 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 8002788:	6178      	str	r0, [r7, #20]
 800278a:	e014      	b.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027a4:	f7ff f9f2 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 80027a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027bc:	d10b      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d919      	bls.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2ba0      	cmp	r3, #160	; 0xa0
 80027c8:	d902      	bls.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ca:	2302      	movs	r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e013      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e010      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d902      	bls.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027dc:	2303      	movs	r3, #3
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e00a      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d102      	bne.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e8:	2302      	movs	r3, #2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	e004      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b70      	cmp	r3, #112	; 0x70
 80027f2:	d101      	bne.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f4:	2301      	movs	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 0207 	bic.w	r2, r3, #7
 8002800:	4909      	ldr	r1, [pc, #36]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	40022000 	.word	0x40022000

0800282c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002834:	2300      	movs	r3, #0
 8002836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002838:	2300      	movs	r3, #0
 800283a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	2b00      	cmp	r3, #0
 8002846:	d041      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002850:	d02a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002856:	d824      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800285c:	d008      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800285e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002862:	d81e      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286c:	d010      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800286e:	e018      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a85      	ldr	r2, [pc, #532]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800287c:	e015      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fabb 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800288e:	e00c      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3320      	adds	r3, #32
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fba6 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a0:	e003      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	74fb      	strb	r3, [r7, #19]
      break;
 80028a6:	e000      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b0:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028be:	4973      	ldr	r1, [pc, #460]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028c6:	e001      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d041      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e0:	d02a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e6:	d824      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f2:	d81e      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d010      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028fe:	e018      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800290c:	e015      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa73 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800291e:	e00c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3320      	adds	r3, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fb5e 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002940:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294e:	494f      	ldr	r1, [pc, #316]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002956:	e001      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a0 	beq.w	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298e:	6593      	str	r3, [r2, #88]	; 0x58
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fdfe 	bl	80015ac <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b2:	e009      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fe fdfa 	bl	80015ac <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	74fb      	strb	r3, [r7, #19]
        break;
 80029c6:	e005      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d15c      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d019      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe fdb9 	bl	80015ac <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fdb5 	bl	80015ac <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d902      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	74fb      	strb	r3, [r7, #19]
            break;
 8002a54:	e006      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ec      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a82:	e009      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a98:	7c7b      	ldrb	r3, [r7, #17]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b9e      	ldr	r3, [pc, #632]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	4a9d      	ldr	r2, [pc, #628]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab6:	4b98      	ldr	r3, [pc, #608]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f023 0203 	bic.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	4994      	ldr	r1, [pc, #592]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 020c 	bic.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	498c      	ldr	r1, [pc, #560]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002afa:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4983      	ldr	r1, [pc, #524]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	497b      	ldr	r1, [pc, #492]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	4972      	ldr	r1, [pc, #456]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b60:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	496a      	ldr	r1, [pc, #424]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	4961      	ldr	r1, [pc, #388]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	4959      	ldr	r1, [pc, #356]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	4950      	ldr	r1, [pc, #320]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	4948      	ldr	r1, [pc, #288]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	493f      	ldr	r1, [pc, #252]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d028      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e011      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f8c8 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	491f      	ldr	r1, [pc, #124]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb4:	60d3      	str	r3, [r2, #12]
 8002cb6:	e011      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f899 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d06:	d109      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e014      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f867 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d02f      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5a:	4928      	ldr	r1, [pc, #160]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f844 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
 8002d86:	e011      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3320      	adds	r3, #32
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f925 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	490d      	ldr	r1, [pc, #52]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000

08002e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e0e:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10d      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e32:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
       ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d047      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e044      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d018      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0x86>
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d825      	bhi.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d002      	beq.n	8002e62 <RCCEx_PLLSAI1_Config+0x62>
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d009      	beq.n	8002e74 <RCCEx_PLLSAI1_Config+0x74>
 8002e60:	e020      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d11d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e72:	e01a      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e84:	e013      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e86:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ea2:	e006      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	e004      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	4944      	ldr	r1, [pc, #272]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d17d      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fb60 	bl	80015ac <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eee:	e009      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef0:	f7fe fb5c 	bl	80015ac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d902      	bls.n	8002f04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	73fb      	strb	r3, [r7, #15]
        break;
 8002f02:	e005      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ef      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d160      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	0912      	lsrs	r2, r2, #4
 8002f34:	0452      	lsls	r2, r2, #17
 8002f36:	430a      	orrs	r2, r1
 8002f38:	492a      	ldr	r1, [pc, #168]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
 8002f3e:	e027      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d112      	bne.n	8002f6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	0211      	lsls	r1, r2, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6912      	ldr	r2, [r2, #16]
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0552      	lsls	r2, r2, #21
 8002f62:	430a      	orrs	r2, r1
 8002f64:	491f      	ldr	r1, [pc, #124]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
 8002f6a:	e011      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	0211      	lsls	r1, r2, #8
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6952      	ldr	r2, [r2, #20]
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0652      	lsls	r2, r2, #25
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fb06 	bl	80015ac <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa4:	f7fe fb02 	bl	80015ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb6:	e005      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d10d      	bne.n	800302e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
       ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
       ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d047      	beq.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e044      	b.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d018      	beq.n	800306e <RCCEx_PLLSAI2_Config+0x86>
 800303c:	2b03      	cmp	r3, #3
 800303e:	d825      	bhi.n	800308c <RCCEx_PLLSAI2_Config+0xa4>
 8003040:	2b01      	cmp	r3, #1
 8003042:	d002      	beq.n	800304a <RCCEx_PLLSAI2_Config+0x62>
 8003044:	2b02      	cmp	r3, #2
 8003046:	d009      	beq.n	800305c <RCCEx_PLLSAI2_Config+0x74>
 8003048:	e020      	b.n	800308c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11d      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305a:	e01a      	b.n	8003092 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e013      	b.n	8003096 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308a:	e006      	b.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      break;
 8003090:	e004      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800309a:	bf00      	nop
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	430b      	orrs	r3, r1
 80030b8:	4939      	ldr	r1, [pc, #228]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d167      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fa6c 	bl	80015ac <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d6:	e009      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030d8:	f7fe fa68 	bl	80015ac <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ea:	e005      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ef      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d14a      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6892      	ldr	r2, [r2, #8]
 8003114:	0211      	lsls	r1, r2, #8
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	0912      	lsrs	r2, r2, #4
 800311c:	0452      	lsls	r2, r2, #17
 800311e:	430a      	orrs	r2, r1
 8003120:	491f      	ldr	r1, [pc, #124]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	614b      	str	r3, [r1, #20]
 8003126:	e011      	b.n	800314c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003130:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	0211      	lsls	r1, r2, #8
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6912      	ldr	r2, [r2, #16]
 800313e:	0852      	lsrs	r2, r2, #1
 8003140:	3a01      	subs	r2, #1
 8003142:	0652      	lsls	r2, r2, #25
 8003144:	430a      	orrs	r2, r1
 8003146:	4916      	ldr	r1, [pc, #88]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fa28 	bl	80015ac <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800315e:	e009      	b.n	8003174 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003160:	f7fe fa24 	bl	80015ac <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	73fb      	strb	r3, [r7, #15]
          break;
 8003172:	e005      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4904      	ldr	r1, [pc, #16]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e040      	b.n	8003238 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe f88a 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f992 	bl	800350c <UART_SetConfig>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e022      	b.n	8003238 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fc10 	bl	8003a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800320e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800321e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fc97 	bl	8003b64 <UART_CheckIdleState>
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003254:	2b20      	cmp	r3, #32
 8003256:	f040 8082 	bne.w	800335e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_UART_Transmit+0x26>
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07a      	b.n	8003360 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_UART_Transmit+0x38>
 8003274:	2302      	movs	r3, #2
 8003276:	e073      	b.n	8003360 <HAL_UART_Transmit+0x120>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2221      	movs	r2, #33	; 0x21
 800328c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328e:	f7fe f98d 	bl	80015ac <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x80>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032d0:	e02d      	b.n	800332e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fc8a 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e039      	b.n	8003360 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fe:	b292      	uxth	r2, r2
 8003300:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3302      	adds	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e008      	b.n	800331c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b292      	uxth	r2, r2
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1cb      	bne.n	80032d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fc56 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e005      	b.n	8003360 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337c:	2b20      	cmp	r3, #32
 800337e:	f040 80bf 	bne.w	8003500 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Receive+0x26>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0b7      	b.n	8003502 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Receive+0x38>
 800339c:	2302      	movs	r3, #2
 800339e:	e0b0      	b.n	8003502 <HAL_UART_Receive+0x19a>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033bc:	f7fe f8f6 	bl	80015ac <HAL_GetTick>
 80033c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d10e      	bne.n	80033fa <HAL_UART_Receive+0x92>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_UART_Receive+0x88>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ee:	e02d      	b.n	800344c <HAL_UART_Receive+0xe4>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033f8:	e028      	b.n	800344c <HAL_UART_Receive+0xe4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_UART_Receive+0xb6>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_UART_Receive+0xac>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003412:	e01b      	b.n	800344c <HAL_UART_Receive+0xe4>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	227f      	movs	r2, #127	; 0x7f
 8003418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800341c:	e016      	b.n	800344c <HAL_UART_Receive+0xe4>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003426:	d10d      	bne.n	8003444 <HAL_UART_Receive+0xdc>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_UART_Receive+0xd2>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	227f      	movs	r2, #127	; 0x7f
 8003434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003438:	e008      	b.n	800344c <HAL_UART_Receive+0xe4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	223f      	movs	r2, #63	; 0x3f
 800343e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003442:	e003      	b.n	800344c <HAL_UART_Receive+0xe4>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003452:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d108      	bne.n	8003470 <HAL_UART_Receive+0x108>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e003      	b.n	8003478 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003480:	e033      	b.n	80034ea <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2120      	movs	r1, #32
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fbb2 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e032      	b.n	8003502 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	8a7b      	ldrh	r3, [r7, #18]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	3302      	adds	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e00d      	b.n	80034d8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8a7b      	ldrh	r3, [r7, #18]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1c5      	bne.n	8003482 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4313      	orrs	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4bad      	ldr	r3, [pc, #692]	; (80037ec <UART_SetConfig+0x2e0>)
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	69f9      	ldr	r1, [r7, #28]
 8003540:	430b      	orrs	r3, r1
 8003542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4aa2      	ldr	r2, [pc, #648]	; (80037f0 <UART_SetConfig+0x2e4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	4313      	orrs	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a99      	ldr	r2, [pc, #612]	; (80037f4 <UART_SetConfig+0x2e8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d121      	bne.n	80035d6 <UART_SetConfig+0xca>
 8003592:	4b99      	ldr	r3, [pc, #612]	; (80037f8 <UART_SetConfig+0x2ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d817      	bhi.n	80035d0 <UART_SetConfig+0xc4>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0x9c>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035c5 	.word	0x080035c5
 80035b0:	080035bf 	.word	0x080035bf
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	2301      	movs	r3, #1
 80035ba:	76fb      	strb	r3, [r7, #27]
 80035bc:	e0e7      	b.n	800378e <UART_SetConfig+0x282>
 80035be:	2302      	movs	r3, #2
 80035c0:	76fb      	strb	r3, [r7, #27]
 80035c2:	e0e4      	b.n	800378e <UART_SetConfig+0x282>
 80035c4:	2304      	movs	r3, #4
 80035c6:	76fb      	strb	r3, [r7, #27]
 80035c8:	e0e1      	b.n	800378e <UART_SetConfig+0x282>
 80035ca:	2308      	movs	r3, #8
 80035cc:	76fb      	strb	r3, [r7, #27]
 80035ce:	e0de      	b.n	800378e <UART_SetConfig+0x282>
 80035d0:	2310      	movs	r3, #16
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	e0db      	b.n	800378e <UART_SetConfig+0x282>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a88      	ldr	r2, [pc, #544]	; (80037fc <UART_SetConfig+0x2f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d132      	bne.n	8003646 <UART_SetConfig+0x13a>
 80035e0:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <UART_SetConfig+0x2ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d828      	bhi.n	8003640 <UART_SetConfig+0x134>
 80035ee:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <UART_SetConfig+0xe8>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003641 	.word	0x08003641
 8003604:	08003635 	.word	0x08003635
 8003608:	08003641 	.word	0x08003641
 800360c:	08003641 	.word	0x08003641
 8003610:	08003641 	.word	0x08003641
 8003614:	0800362f 	.word	0x0800362f
 8003618:	08003641 	.word	0x08003641
 800361c:	08003641 	.word	0x08003641
 8003620:	08003641 	.word	0x08003641
 8003624:	0800363b 	.word	0x0800363b
 8003628:	2300      	movs	r3, #0
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e0af      	b.n	800378e <UART_SetConfig+0x282>
 800362e:	2302      	movs	r3, #2
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e0ac      	b.n	800378e <UART_SetConfig+0x282>
 8003634:	2304      	movs	r3, #4
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e0a9      	b.n	800378e <UART_SetConfig+0x282>
 800363a:	2308      	movs	r3, #8
 800363c:	76fb      	strb	r3, [r7, #27]
 800363e:	e0a6      	b.n	800378e <UART_SetConfig+0x282>
 8003640:	2310      	movs	r3, #16
 8003642:	76fb      	strb	r3, [r7, #27]
 8003644:	e0a3      	b.n	800378e <UART_SetConfig+0x282>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6d      	ldr	r2, [pc, #436]	; (8003800 <UART_SetConfig+0x2f4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d120      	bne.n	8003692 <UART_SetConfig+0x186>
 8003650:	4b69      	ldr	r3, [pc, #420]	; (80037f8 <UART_SetConfig+0x2ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800365a:	2b30      	cmp	r3, #48	; 0x30
 800365c:	d013      	beq.n	8003686 <UART_SetConfig+0x17a>
 800365e:	2b30      	cmp	r3, #48	; 0x30
 8003660:	d814      	bhi.n	800368c <UART_SetConfig+0x180>
 8003662:	2b20      	cmp	r3, #32
 8003664:	d009      	beq.n	800367a <UART_SetConfig+0x16e>
 8003666:	2b20      	cmp	r3, #32
 8003668:	d810      	bhi.n	800368c <UART_SetConfig+0x180>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <UART_SetConfig+0x168>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d006      	beq.n	8003680 <UART_SetConfig+0x174>
 8003672:	e00b      	b.n	800368c <UART_SetConfig+0x180>
 8003674:	2300      	movs	r3, #0
 8003676:	76fb      	strb	r3, [r7, #27]
 8003678:	e089      	b.n	800378e <UART_SetConfig+0x282>
 800367a:	2302      	movs	r3, #2
 800367c:	76fb      	strb	r3, [r7, #27]
 800367e:	e086      	b.n	800378e <UART_SetConfig+0x282>
 8003680:	2304      	movs	r3, #4
 8003682:	76fb      	strb	r3, [r7, #27]
 8003684:	e083      	b.n	800378e <UART_SetConfig+0x282>
 8003686:	2308      	movs	r3, #8
 8003688:	76fb      	strb	r3, [r7, #27]
 800368a:	e080      	b.n	800378e <UART_SetConfig+0x282>
 800368c:	2310      	movs	r3, #16
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e07d      	b.n	800378e <UART_SetConfig+0x282>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5b      	ldr	r2, [pc, #364]	; (8003804 <UART_SetConfig+0x2f8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d120      	bne.n	80036de <UART_SetConfig+0x1d2>
 800369c:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <UART_SetConfig+0x2ec>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036a6:	2bc0      	cmp	r3, #192	; 0xc0
 80036a8:	d013      	beq.n	80036d2 <UART_SetConfig+0x1c6>
 80036aa:	2bc0      	cmp	r3, #192	; 0xc0
 80036ac:	d814      	bhi.n	80036d8 <UART_SetConfig+0x1cc>
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d009      	beq.n	80036c6 <UART_SetConfig+0x1ba>
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d810      	bhi.n	80036d8 <UART_SetConfig+0x1cc>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x1b4>
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d006      	beq.n	80036cc <UART_SetConfig+0x1c0>
 80036be:	e00b      	b.n	80036d8 <UART_SetConfig+0x1cc>
 80036c0:	2300      	movs	r3, #0
 80036c2:	76fb      	strb	r3, [r7, #27]
 80036c4:	e063      	b.n	800378e <UART_SetConfig+0x282>
 80036c6:	2302      	movs	r3, #2
 80036c8:	76fb      	strb	r3, [r7, #27]
 80036ca:	e060      	b.n	800378e <UART_SetConfig+0x282>
 80036cc:	2304      	movs	r3, #4
 80036ce:	76fb      	strb	r3, [r7, #27]
 80036d0:	e05d      	b.n	800378e <UART_SetConfig+0x282>
 80036d2:	2308      	movs	r3, #8
 80036d4:	76fb      	strb	r3, [r7, #27]
 80036d6:	e05a      	b.n	800378e <UART_SetConfig+0x282>
 80036d8:	2310      	movs	r3, #16
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e057      	b.n	800378e <UART_SetConfig+0x282>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a49      	ldr	r2, [pc, #292]	; (8003808 <UART_SetConfig+0x2fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d125      	bne.n	8003734 <UART_SetConfig+0x228>
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <UART_SetConfig+0x2ec>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f6:	d017      	beq.n	8003728 <UART_SetConfig+0x21c>
 80036f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fc:	d817      	bhi.n	800372e <UART_SetConfig+0x222>
 80036fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003702:	d00b      	beq.n	800371c <UART_SetConfig+0x210>
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d811      	bhi.n	800372e <UART_SetConfig+0x222>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <UART_SetConfig+0x20a>
 800370e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003712:	d006      	beq.n	8003722 <UART_SetConfig+0x216>
 8003714:	e00b      	b.n	800372e <UART_SetConfig+0x222>
 8003716:	2300      	movs	r3, #0
 8003718:	76fb      	strb	r3, [r7, #27]
 800371a:	e038      	b.n	800378e <UART_SetConfig+0x282>
 800371c:	2302      	movs	r3, #2
 800371e:	76fb      	strb	r3, [r7, #27]
 8003720:	e035      	b.n	800378e <UART_SetConfig+0x282>
 8003722:	2304      	movs	r3, #4
 8003724:	76fb      	strb	r3, [r7, #27]
 8003726:	e032      	b.n	800378e <UART_SetConfig+0x282>
 8003728:	2308      	movs	r3, #8
 800372a:	76fb      	strb	r3, [r7, #27]
 800372c:	e02f      	b.n	800378e <UART_SetConfig+0x282>
 800372e:	2310      	movs	r3, #16
 8003730:	76fb      	strb	r3, [r7, #27]
 8003732:	e02c      	b.n	800378e <UART_SetConfig+0x282>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <UART_SetConfig+0x2e4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d125      	bne.n	800378a <UART_SetConfig+0x27e>
 800373e:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <UART_SetConfig+0x2ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374c:	d017      	beq.n	800377e <UART_SetConfig+0x272>
 800374e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003752:	d817      	bhi.n	8003784 <UART_SetConfig+0x278>
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003758:	d00b      	beq.n	8003772 <UART_SetConfig+0x266>
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375e:	d811      	bhi.n	8003784 <UART_SetConfig+0x278>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <UART_SetConfig+0x260>
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d006      	beq.n	8003778 <UART_SetConfig+0x26c>
 800376a:	e00b      	b.n	8003784 <UART_SetConfig+0x278>
 800376c:	2300      	movs	r3, #0
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x282>
 8003772:	2302      	movs	r3, #2
 8003774:	76fb      	strb	r3, [r7, #27]
 8003776:	e00a      	b.n	800378e <UART_SetConfig+0x282>
 8003778:	2304      	movs	r3, #4
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e007      	b.n	800378e <UART_SetConfig+0x282>
 800377e:	2308      	movs	r3, #8
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e004      	b.n	800378e <UART_SetConfig+0x282>
 8003784:	2310      	movs	r3, #16
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e001      	b.n	800378e <UART_SetConfig+0x282>
 800378a:	2310      	movs	r3, #16
 800378c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <UART_SetConfig+0x2e4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f040 8087 	bne.w	80038a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800379a:	7efb      	ldrb	r3, [r7, #27]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d837      	bhi.n	8003810 <UART_SetConfig+0x304>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x29c>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	08003811 	.word	0x08003811
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	08003811 	.word	0x08003811
 80037b8:	080037db 	.word	0x080037db
 80037bc:	08003811 	.word	0x08003811
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003811 	.word	0x08003811
 80037c8:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7fe ffa2 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80037d0:	6178      	str	r0, [r7, #20]
        break;
 80037d2:	e022      	b.n	800381a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <UART_SetConfig+0x300>)
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e01f      	b.n	800381a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe ff03 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80037de:	6178      	str	r0, [r7, #20]
        break;
 80037e0:	e01b      	b.n	800381a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	617b      	str	r3, [r7, #20]
        break;
 80037e8:	e017      	b.n	800381a <UART_SetConfig+0x30e>
 80037ea:	bf00      	nop
 80037ec:	efff69f3 	.word	0xefff69f3
 80037f0:	40008000 	.word	0x40008000
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	76bb      	strb	r3, [r7, #26]
        break;
 8003818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80f1 	beq.w	8003a04 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	429a      	cmp	r2, r3
 8003830:	d305      	bcc.n	800383e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	429a      	cmp	r2, r3
 800383c:	d902      	bls.n	8003844 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	76bb      	strb	r3, [r7, #26]
 8003842:	e0df      	b.n	8003a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4618      	mov	r0, r3
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	020b      	lsls	r3, r1, #8
 8003856:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800385a:	0202      	lsls	r2, r0, #8
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	6849      	ldr	r1, [r1, #4]
 8003860:	0849      	lsrs	r1, r1, #1
 8003862:	4608      	mov	r0, r1
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	1814      	adds	r4, r2, r0
 800386a:	eb43 0501 	adc.w	r5, r3, r1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	4620      	mov	r0, r4
 800387a:	4629      	mov	r1, r5
 800387c:	f7fd f85e 	bl	800093c <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388e:	d308      	bcc.n	80038a2 <UART_SetConfig+0x396>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003896:	d204      	bcs.n	80038a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e0b0      	b.n	8003a04 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	76bb      	strb	r3, [r7, #26]
 80038a6:	e0ad      	b.n	8003a04 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	d15c      	bne.n	800396c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80038b2:	7efb      	ldrb	r3, [r7, #27]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d828      	bhi.n	800390a <UART_SetConfig+0x3fe>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0x3b4>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038fb 	.word	0x080038fb
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	0800390b 	.word	0x0800390b
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7fe ff16 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80038e8:	6178      	str	r0, [r7, #20]
        break;
 80038ea:	e013      	b.n	8003914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7fe ff28 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80038f0:	6178      	str	r0, [r7, #20]
        break;
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <UART_SetConfig+0x510>)
 80038f6:	617b      	str	r3, [r7, #20]
        break;
 80038f8:	e00c      	b.n	8003914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7fe fe73 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80038fe:	6178      	str	r0, [r7, #20]
        break;
 8003900:	e008      	b.n	8003914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003906:	617b      	str	r3, [r7, #20]
        break;
 8003908:	e004      	b.n	8003914 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	76bb      	strb	r3, [r7, #26]
        break;
 8003912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d074      	beq.n	8003a04 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005a      	lsls	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	b29b      	uxth	r3, r3
 8003930:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b0f      	cmp	r3, #15
 8003936:	d916      	bls.n	8003966 <UART_SetConfig+0x45a>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393e:	d212      	bcs.n	8003966 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f023 030f 	bic.w	r3, r3, #15
 8003948:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	b29a      	uxth	r2, r3
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	4313      	orrs	r3, r2
 800395a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	89fa      	ldrh	r2, [r7, #14]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	e04e      	b.n	8003a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	76bb      	strb	r3, [r7, #26]
 800396a:	e04b      	b.n	8003a04 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800396c:	7efb      	ldrb	r3, [r7, #27]
 800396e:	2b08      	cmp	r3, #8
 8003970:	d827      	bhi.n	80039c2 <UART_SetConfig+0x4b6>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x46c>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039a5 	.word	0x080039a5
 8003980:	080039ad 	.word	0x080039ad
 8003984:	080039c3 	.word	0x080039c3
 8003988:	080039b3 	.word	0x080039b3
 800398c:	080039c3 	.word	0x080039c3
 8003990:	080039c3 	.word	0x080039c3
 8003994:	080039c3 	.word	0x080039c3
 8003998:	080039bb 	.word	0x080039bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe feba 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80039a0:	6178      	str	r0, [r7, #20]
        break;
 80039a2:	e013      	b.n	80039cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7fe fecc 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80039a8:	6178      	str	r0, [r7, #20]
        break;
 80039aa:	e00f      	b.n	80039cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <UART_SetConfig+0x510>)
 80039ae:	617b      	str	r3, [r7, #20]
        break;
 80039b0:	e00c      	b.n	80039cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b2:	f7fe fe17 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80039b6:	6178      	str	r0, [r7, #20]
        break;
 80039b8:	e008      	b.n	80039cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039be:	617b      	str	r3, [r7, #20]
        break;
 80039c0:	e004      	b.n	80039cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	76bb      	strb	r3, [r7, #26]
        break;
 80039ca:	bf00      	nop
    }

    if (pclk != 0U)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	085a      	lsrs	r2, r3, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	d908      	bls.n	8003a00 <UART_SetConfig+0x4f4>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d204      	bcs.n	8003a00 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e001      	b.n	8003a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a10:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bdb0      	pop	{r4, r5, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	00f42400 	.word	0x00f42400

08003a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1e:	d10a      	bne.n	8003b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b74:	f7fd fd1a 	bl	80015ac <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d10e      	bne.n	8003ba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f82d 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e023      	b.n	8003bee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d10e      	bne.n	8003bd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f817 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00d      	b.n	8003bee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	e05e      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d05a      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c10:	f7fd fccc 	bl	80015ac <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d302      	bcc.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11b      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e043      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02c      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d124      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c84:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00f      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d091      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <__errno>:
 8003cf0:	4b01      	ldr	r3, [pc, #4]	; (8003cf8 <__errno+0x8>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2000000c 	.word	0x2000000c

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4d0d      	ldr	r5, [pc, #52]	; (8003d34 <__libc_init_array+0x38>)
 8003d00:	4c0d      	ldr	r4, [pc, #52]	; (8003d38 <__libc_init_array+0x3c>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	2600      	movs	r6, #0
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	4d0b      	ldr	r5, [pc, #44]	; (8003d3c <__libc_init_array+0x40>)
 8003d0e:	4c0c      	ldr	r4, [pc, #48]	; (8003d40 <__libc_init_array+0x44>)
 8003d10:	f000 fc4e 	bl	80045b0 <_init>
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	2600      	movs	r6, #0
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	08004660 	.word	0x08004660
 8003d38:	08004660 	.word	0x08004660
 8003d3c:	08004660 	.word	0x08004660
 8003d40:	08004664 	.word	0x08004664

08003d44 <memset>:
 8003d44:	4402      	add	r2, r0
 8003d46:	4603      	mov	r3, r0
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <memset+0xa>
 8003d4c:	4770      	bx	lr
 8003d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d52:	e7f9      	b.n	8003d48 <memset+0x4>

08003d54 <siprintf>:
 8003d54:	b40e      	push	{r1, r2, r3}
 8003d56:	b500      	push	{lr}
 8003d58:	b09c      	sub	sp, #112	; 0x70
 8003d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d5c:	9002      	str	r0, [sp, #8]
 8003d5e:	9006      	str	r0, [sp, #24]
 8003d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d64:	4809      	ldr	r0, [pc, #36]	; (8003d8c <siprintf+0x38>)
 8003d66:	9107      	str	r1, [sp, #28]
 8003d68:	9104      	str	r1, [sp, #16]
 8003d6a:	4909      	ldr	r1, [pc, #36]	; (8003d90 <siprintf+0x3c>)
 8003d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d70:	9105      	str	r1, [sp, #20]
 8003d72:	6800      	ldr	r0, [r0, #0]
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	a902      	add	r1, sp, #8
 8003d78:	f000 f868 	bl	8003e4c <_svfiprintf_r>
 8003d7c:	9b02      	ldr	r3, [sp, #8]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	b01c      	add	sp, #112	; 0x70
 8003d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d88:	b003      	add	sp, #12
 8003d8a:	4770      	bx	lr
 8003d8c:	2000000c 	.word	0x2000000c
 8003d90:	ffff0208 	.word	0xffff0208

08003d94 <__ssputs_r>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	688e      	ldr	r6, [r1, #8]
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4690      	mov	r8, r2
 8003da2:	461f      	mov	r7, r3
 8003da4:	d838      	bhi.n	8003e18 <__ssputs_r+0x84>
 8003da6:	898a      	ldrh	r2, [r1, #12]
 8003da8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dac:	d032      	beq.n	8003e14 <__ssputs_r+0x80>
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	6909      	ldr	r1, [r1, #16]
 8003db2:	eba5 0901 	sub.w	r9, r5, r1
 8003db6:	6965      	ldr	r5, [r4, #20]
 8003db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	444b      	add	r3, r9
 8003dc4:	106d      	asrs	r5, r5, #1
 8003dc6:	429d      	cmp	r5, r3
 8003dc8:	bf38      	it	cc
 8003dca:	461d      	movcc	r5, r3
 8003dcc:	0553      	lsls	r3, r2, #21
 8003dce:	d531      	bpl.n	8003e34 <__ssputs_r+0xa0>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f000 fb47 	bl	8004464 <_malloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	b950      	cbnz	r0, 8003df0 <__ssputs_r+0x5c>
 8003dda:	230c      	movs	r3, #12
 8003ddc:	f8ca 3000 	str.w	r3, [sl]
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df0:	6921      	ldr	r1, [r4, #16]
 8003df2:	464a      	mov	r2, r9
 8003df4:	f000 fabe 	bl	8004374 <memcpy>
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	6126      	str	r6, [r4, #16]
 8003e06:	6165      	str	r5, [r4, #20]
 8003e08:	444e      	add	r6, r9
 8003e0a:	eba5 0509 	sub.w	r5, r5, r9
 8003e0e:	6026      	str	r6, [r4, #0]
 8003e10:	60a5      	str	r5, [r4, #8]
 8003e12:	463e      	mov	r6, r7
 8003e14:	42be      	cmp	r6, r7
 8003e16:	d900      	bls.n	8003e1a <__ssputs_r+0x86>
 8003e18:	463e      	mov	r6, r7
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	4641      	mov	r1, r8
 8003e20:	f000 fab6 	bl	8004390 <memmove>
 8003e24:	68a3      	ldr	r3, [r4, #8]
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	1b9b      	subs	r3, r3, r6
 8003e2a:	4432      	add	r2, r6
 8003e2c:	60a3      	str	r3, [r4, #8]
 8003e2e:	6022      	str	r2, [r4, #0]
 8003e30:	2000      	movs	r0, #0
 8003e32:	e7db      	b.n	8003dec <__ssputs_r+0x58>
 8003e34:	462a      	mov	r2, r5
 8003e36:	f000 fb6f 	bl	8004518 <_realloc_r>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1e1      	bne.n	8003e04 <__ssputs_r+0x70>
 8003e40:	6921      	ldr	r1, [r4, #16]
 8003e42:	4650      	mov	r0, sl
 8003e44:	f000 fabe 	bl	80043c4 <_free_r>
 8003e48:	e7c7      	b.n	8003dda <__ssputs_r+0x46>
	...

08003e4c <_svfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	4698      	mov	r8, r3
 8003e52:	898b      	ldrh	r3, [r1, #12]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	b09d      	sub	sp, #116	; 0x74
 8003e58:	4607      	mov	r7, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	d50e      	bpl.n	8003e7e <_svfiprintf_r+0x32>
 8003e60:	690b      	ldr	r3, [r1, #16]
 8003e62:	b963      	cbnz	r3, 8003e7e <_svfiprintf_r+0x32>
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	f000 fafd 	bl	8004464 <_malloc_r>
 8003e6a:	6028      	str	r0, [r5, #0]
 8003e6c:	6128      	str	r0, [r5, #16]
 8003e6e:	b920      	cbnz	r0, 8003e7a <_svfiprintf_r+0x2e>
 8003e70:	230c      	movs	r3, #12
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e0d1      	b.n	800401e <_svfiprintf_r+0x1d2>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	616b      	str	r3, [r5, #20]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9309      	str	r3, [sp, #36]	; 0x24
 8003e82:	2320      	movs	r3, #32
 8003e84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8c:	2330      	movs	r3, #48	; 0x30
 8003e8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004038 <_svfiprintf_r+0x1ec>
 8003e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e96:	f04f 0901 	mov.w	r9, #1
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	469a      	mov	sl, r3
 8003e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea2:	b10a      	cbz	r2, 8003ea8 <_svfiprintf_r+0x5c>
 8003ea4:	2a25      	cmp	r2, #37	; 0x25
 8003ea6:	d1f9      	bne.n	8003e9c <_svfiprintf_r+0x50>
 8003ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8003eac:	d00b      	beq.n	8003ec6 <_svfiprintf_r+0x7a>
 8003eae:	465b      	mov	r3, fp
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ff6d 	bl	8003d94 <__ssputs_r>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f000 80aa 	beq.w	8004014 <_svfiprintf_r+0x1c8>
 8003ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec2:	445a      	add	r2, fp
 8003ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80a2 	beq.w	8004014 <_svfiprintf_r+0x1c8>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eda:	f10a 0a01 	add.w	sl, sl, #1
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	9307      	str	r3, [sp, #28]
 8003ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee8:	4654      	mov	r4, sl
 8003eea:	2205      	movs	r2, #5
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	4851      	ldr	r0, [pc, #324]	; (8004038 <_svfiprintf_r+0x1ec>)
 8003ef2:	f7fc f975 	bl	80001e0 <memchr>
 8003ef6:	9a04      	ldr	r2, [sp, #16]
 8003ef8:	b9d8      	cbnz	r0, 8003f32 <_svfiprintf_r+0xe6>
 8003efa:	06d0      	lsls	r0, r2, #27
 8003efc:	bf44      	itt	mi
 8003efe:	2320      	movmi	r3, #32
 8003f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f04:	0711      	lsls	r1, r2, #28
 8003f06:	bf44      	itt	mi
 8003f08:	232b      	movmi	r3, #43	; 0x2b
 8003f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f12:	2b2a      	cmp	r3, #42	; 0x2a
 8003f14:	d015      	beq.n	8003f42 <_svfiprintf_r+0xf6>
 8003f16:	9a07      	ldr	r2, [sp, #28]
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f04f 0c0a 	mov.w	ip, #10
 8003f20:	4621      	mov	r1, r4
 8003f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f26:	3b30      	subs	r3, #48	; 0x30
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d94e      	bls.n	8003fca <_svfiprintf_r+0x17e>
 8003f2c:	b1b0      	cbz	r0, 8003f5c <_svfiprintf_r+0x110>
 8003f2e:	9207      	str	r2, [sp, #28]
 8003f30:	e014      	b.n	8003f5c <_svfiprintf_r+0x110>
 8003f32:	eba0 0308 	sub.w	r3, r0, r8
 8003f36:	fa09 f303 	lsl.w	r3, r9, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	46a2      	mov	sl, r4
 8003f40:	e7d2      	b.n	8003ee8 <_svfiprintf_r+0x9c>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	9103      	str	r1, [sp, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfbb      	ittet	lt
 8003f4e:	425b      	neglt	r3, r3
 8003f50:	f042 0202 	orrlt.w	r2, r2, #2
 8003f54:	9307      	strge	r3, [sp, #28]
 8003f56:	9307      	strlt	r3, [sp, #28]
 8003f58:	bfb8      	it	lt
 8003f5a:	9204      	strlt	r2, [sp, #16]
 8003f5c:	7823      	ldrb	r3, [r4, #0]
 8003f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f60:	d10c      	bne.n	8003f7c <_svfiprintf_r+0x130>
 8003f62:	7863      	ldrb	r3, [r4, #1]
 8003f64:	2b2a      	cmp	r3, #42	; 0x2a
 8003f66:	d135      	bne.n	8003fd4 <_svfiprintf_r+0x188>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9203      	str	r2, [sp, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bfb8      	it	lt
 8003f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f78:	3402      	adds	r4, #2
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004048 <_svfiprintf_r+0x1fc>
 8003f80:	7821      	ldrb	r1, [r4, #0]
 8003f82:	2203      	movs	r2, #3
 8003f84:	4650      	mov	r0, sl
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	b140      	cbz	r0, 8003f9e <_svfiprintf_r+0x152>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	eba0 000a 	sub.w	r0, r0, sl
 8003f92:	fa03 f000 	lsl.w	r0, r3, r0
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	4303      	orrs	r3, r0
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa2:	4826      	ldr	r0, [pc, #152]	; (800403c <_svfiprintf_r+0x1f0>)
 8003fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa8:	2206      	movs	r2, #6
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d038      	beq.n	8004024 <_svfiprintf_r+0x1d8>
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <_svfiprintf_r+0x1f4>)
 8003fb4:	bb1b      	cbnz	r3, 8003ffe <_svfiprintf_r+0x1b2>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3307      	adds	r3, #7
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	4433      	add	r3, r6
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	e767      	b.n	8003e9a <_svfiprintf_r+0x4e>
 8003fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fce:	460c      	mov	r4, r1
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	e7a5      	b.n	8003f20 <_svfiprintf_r+0xd4>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f04f 0c0a 	mov.w	ip, #10
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe6:	3a30      	subs	r2, #48	; 0x30
 8003fe8:	2a09      	cmp	r2, #9
 8003fea:	d903      	bls.n	8003ff4 <_svfiprintf_r+0x1a8>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0c5      	beq.n	8003f7c <_svfiprintf_r+0x130>
 8003ff0:	9105      	str	r1, [sp, #20]
 8003ff2:	e7c3      	b.n	8003f7c <_svfiprintf_r+0x130>
 8003ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e7f0      	b.n	8003fe0 <_svfiprintf_r+0x194>
 8003ffe:	ab03      	add	r3, sp, #12
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	462a      	mov	r2, r5
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <_svfiprintf_r+0x1f8>)
 8004006:	a904      	add	r1, sp, #16
 8004008:	4638      	mov	r0, r7
 800400a:	f3af 8000 	nop.w
 800400e:	1c42      	adds	r2, r0, #1
 8004010:	4606      	mov	r6, r0
 8004012:	d1d6      	bne.n	8003fc2 <_svfiprintf_r+0x176>
 8004014:	89ab      	ldrh	r3, [r5, #12]
 8004016:	065b      	lsls	r3, r3, #25
 8004018:	f53f af2c 	bmi.w	8003e74 <_svfiprintf_r+0x28>
 800401c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800401e:	b01d      	add	sp, #116	; 0x74
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	462a      	mov	r2, r5
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <_svfiprintf_r+0x1f8>)
 800402c:	a904      	add	r1, sp, #16
 800402e:	4638      	mov	r0, r7
 8004030:	f000 f87a 	bl	8004128 <_printf_i>
 8004034:	e7eb      	b.n	800400e <_svfiprintf_r+0x1c2>
 8004036:	bf00      	nop
 8004038:	08004624 	.word	0x08004624
 800403c:	0800462e 	.word	0x0800462e
 8004040:	00000000 	.word	0x00000000
 8004044:	08003d95 	.word	0x08003d95
 8004048:	0800462a 	.word	0x0800462a

0800404c <_printf_common>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	4616      	mov	r6, r2
 8004052:	4699      	mov	r9, r3
 8004054:	688a      	ldr	r2, [r1, #8]
 8004056:	690b      	ldr	r3, [r1, #16]
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	4293      	cmp	r3, r2
 800405e:	bfb8      	it	lt
 8004060:	4613      	movlt	r3, r2
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004068:	4607      	mov	r7, r0
 800406a:	460c      	mov	r4, r1
 800406c:	b10a      	cbz	r2, 8004072 <_printf_common+0x26>
 800406e:	3301      	adds	r3, #1
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	0699      	lsls	r1, r3, #26
 8004076:	bf42      	ittt	mi
 8004078:	6833      	ldrmi	r3, [r6, #0]
 800407a:	3302      	addmi	r3, #2
 800407c:	6033      	strmi	r3, [r6, #0]
 800407e:	6825      	ldr	r5, [r4, #0]
 8004080:	f015 0506 	ands.w	r5, r5, #6
 8004084:	d106      	bne.n	8004094 <_printf_common+0x48>
 8004086:	f104 0a19 	add.w	sl, r4, #25
 800408a:	68e3      	ldr	r3, [r4, #12]
 800408c:	6832      	ldr	r2, [r6, #0]
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	42ab      	cmp	r3, r5
 8004092:	dc26      	bgt.n	80040e2 <_printf_common+0x96>
 8004094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004098:	1e13      	subs	r3, r2, #0
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	bf18      	it	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	0692      	lsls	r2, r2, #26
 80040a2:	d42b      	bmi.n	80040fc <_printf_common+0xb0>
 80040a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a8:	4649      	mov	r1, r9
 80040aa:	4638      	mov	r0, r7
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d01e      	beq.n	80040f0 <_printf_common+0xa4>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	68e5      	ldr	r5, [r4, #12]
 80040b6:	6832      	ldr	r2, [r6, #0]
 80040b8:	f003 0306 	and.w	r3, r3, #6
 80040bc:	2b04      	cmp	r3, #4
 80040be:	bf08      	it	eq
 80040c0:	1aad      	subeq	r5, r5, r2
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	bf0c      	ite	eq
 80040c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040cc:	2500      	movne	r5, #0
 80040ce:	4293      	cmp	r3, r2
 80040d0:	bfc4      	itt	gt
 80040d2:	1a9b      	subgt	r3, r3, r2
 80040d4:	18ed      	addgt	r5, r5, r3
 80040d6:	2600      	movs	r6, #0
 80040d8:	341a      	adds	r4, #26
 80040da:	42b5      	cmp	r5, r6
 80040dc:	d11a      	bne.n	8004114 <_printf_common+0xc8>
 80040de:	2000      	movs	r0, #0
 80040e0:	e008      	b.n	80040f4 <_printf_common+0xa8>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4652      	mov	r2, sl
 80040e6:	4649      	mov	r1, r9
 80040e8:	4638      	mov	r0, r7
 80040ea:	47c0      	blx	r8
 80040ec:	3001      	adds	r0, #1
 80040ee:	d103      	bne.n	80040f8 <_printf_common+0xac>
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f8:	3501      	adds	r5, #1
 80040fa:	e7c6      	b.n	800408a <_printf_common+0x3e>
 80040fc:	18e1      	adds	r1, r4, r3
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	2030      	movs	r0, #48	; 0x30
 8004102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004106:	4422      	add	r2, r4
 8004108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800410c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004110:	3302      	adds	r3, #2
 8004112:	e7c7      	b.n	80040a4 <_printf_common+0x58>
 8004114:	2301      	movs	r3, #1
 8004116:	4622      	mov	r2, r4
 8004118:	4649      	mov	r1, r9
 800411a:	4638      	mov	r0, r7
 800411c:	47c0      	blx	r8
 800411e:	3001      	adds	r0, #1
 8004120:	d0e6      	beq.n	80040f0 <_printf_common+0xa4>
 8004122:	3601      	adds	r6, #1
 8004124:	e7d9      	b.n	80040da <_printf_common+0x8e>
	...

08004128 <_printf_i>:
 8004128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	460c      	mov	r4, r1
 800412e:	4691      	mov	r9, r2
 8004130:	7e27      	ldrb	r7, [r4, #24]
 8004132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004134:	2f78      	cmp	r7, #120	; 0x78
 8004136:	4680      	mov	r8, r0
 8004138:	469a      	mov	sl, r3
 800413a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413e:	d807      	bhi.n	8004150 <_printf_i+0x28>
 8004140:	2f62      	cmp	r7, #98	; 0x62
 8004142:	d80a      	bhi.n	800415a <_printf_i+0x32>
 8004144:	2f00      	cmp	r7, #0
 8004146:	f000 80d8 	beq.w	80042fa <_printf_i+0x1d2>
 800414a:	2f58      	cmp	r7, #88	; 0x58
 800414c:	f000 80a3 	beq.w	8004296 <_printf_i+0x16e>
 8004150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004158:	e03a      	b.n	80041d0 <_printf_i+0xa8>
 800415a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800415e:	2b15      	cmp	r3, #21
 8004160:	d8f6      	bhi.n	8004150 <_printf_i+0x28>
 8004162:	a001      	add	r0, pc, #4	; (adr r0, 8004168 <_printf_i+0x40>)
 8004164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041d5 	.word	0x080041d5
 8004170:	08004151 	.word	0x08004151
 8004174:	08004151 	.word	0x08004151
 8004178:	08004151 	.word	0x08004151
 800417c:	08004151 	.word	0x08004151
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004151 	.word	0x08004151
 8004188:	08004151 	.word	0x08004151
 800418c:	08004151 	.word	0x08004151
 8004190:	08004151 	.word	0x08004151
 8004194:	080042e1 	.word	0x080042e1
 8004198:	08004205 	.word	0x08004205
 800419c:	080042c3 	.word	0x080042c3
 80041a0:	08004151 	.word	0x08004151
 80041a4:	08004151 	.word	0x08004151
 80041a8:	08004303 	.word	0x08004303
 80041ac:	08004151 	.word	0x08004151
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004151 	.word	0x08004151
 80041b8:	08004151 	.word	0x08004151
 80041bc:	080042cb 	.word	0x080042cb
 80041c0:	680b      	ldr	r3, [r1, #0]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	600a      	str	r2, [r1, #0]
 80041c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0a3      	b.n	800431c <_printf_i+0x1f4>
 80041d4:	6825      	ldr	r5, [r4, #0]
 80041d6:	6808      	ldr	r0, [r1, #0]
 80041d8:	062e      	lsls	r6, r5, #24
 80041da:	f100 0304 	add.w	r3, r0, #4
 80041de:	d50a      	bpl.n	80041f6 <_printf_i+0xce>
 80041e0:	6805      	ldr	r5, [r0, #0]
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	da03      	bge.n	80041f0 <_printf_i+0xc8>
 80041e8:	232d      	movs	r3, #45	; 0x2d
 80041ea:	426d      	negs	r5, r5
 80041ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f0:	485e      	ldr	r0, [pc, #376]	; (800436c <_printf_i+0x244>)
 80041f2:	230a      	movs	r3, #10
 80041f4:	e019      	b.n	800422a <_printf_i+0x102>
 80041f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041fa:	6805      	ldr	r5, [r0, #0]
 80041fc:	600b      	str	r3, [r1, #0]
 80041fe:	bf18      	it	ne
 8004200:	b22d      	sxthne	r5, r5
 8004202:	e7ef      	b.n	80041e4 <_printf_i+0xbc>
 8004204:	680b      	ldr	r3, [r1, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	1d18      	adds	r0, r3, #4
 800420a:	6008      	str	r0, [r1, #0]
 800420c:	0628      	lsls	r0, r5, #24
 800420e:	d501      	bpl.n	8004214 <_printf_i+0xec>
 8004210:	681d      	ldr	r5, [r3, #0]
 8004212:	e002      	b.n	800421a <_printf_i+0xf2>
 8004214:	0669      	lsls	r1, r5, #25
 8004216:	d5fb      	bpl.n	8004210 <_printf_i+0xe8>
 8004218:	881d      	ldrh	r5, [r3, #0]
 800421a:	4854      	ldr	r0, [pc, #336]	; (800436c <_printf_i+0x244>)
 800421c:	2f6f      	cmp	r7, #111	; 0x6f
 800421e:	bf0c      	ite	eq
 8004220:	2308      	moveq	r3, #8
 8004222:	230a      	movne	r3, #10
 8004224:	2100      	movs	r1, #0
 8004226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800422a:	6866      	ldr	r6, [r4, #4]
 800422c:	60a6      	str	r6, [r4, #8]
 800422e:	2e00      	cmp	r6, #0
 8004230:	bfa2      	ittt	ge
 8004232:	6821      	ldrge	r1, [r4, #0]
 8004234:	f021 0104 	bicge.w	r1, r1, #4
 8004238:	6021      	strge	r1, [r4, #0]
 800423a:	b90d      	cbnz	r5, 8004240 <_printf_i+0x118>
 800423c:	2e00      	cmp	r6, #0
 800423e:	d04d      	beq.n	80042dc <_printf_i+0x1b4>
 8004240:	4616      	mov	r6, r2
 8004242:	fbb5 f1f3 	udiv	r1, r5, r3
 8004246:	fb03 5711 	mls	r7, r3, r1, r5
 800424a:	5dc7      	ldrb	r7, [r0, r7]
 800424c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004250:	462f      	mov	r7, r5
 8004252:	42bb      	cmp	r3, r7
 8004254:	460d      	mov	r5, r1
 8004256:	d9f4      	bls.n	8004242 <_printf_i+0x11a>
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10b      	bne.n	8004274 <_printf_i+0x14c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	07df      	lsls	r7, r3, #31
 8004260:	d508      	bpl.n	8004274 <_printf_i+0x14c>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	4299      	cmp	r1, r3
 8004268:	bfde      	ittt	le
 800426a:	2330      	movle	r3, #48	; 0x30
 800426c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004274:	1b92      	subs	r2, r2, r6
 8004276:	6122      	str	r2, [r4, #16]
 8004278:	f8cd a000 	str.w	sl, [sp]
 800427c:	464b      	mov	r3, r9
 800427e:	aa03      	add	r2, sp, #12
 8004280:	4621      	mov	r1, r4
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fee2 	bl	800404c <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	d14c      	bne.n	8004326 <_printf_i+0x1fe>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b004      	add	sp, #16
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	4835      	ldr	r0, [pc, #212]	; (800436c <_printf_i+0x244>)
 8004298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	680e      	ldr	r6, [r1, #0]
 80042a0:	061f      	lsls	r7, r3, #24
 80042a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042a6:	600e      	str	r6, [r1, #0]
 80042a8:	d514      	bpl.n	80042d4 <_printf_i+0x1ac>
 80042aa:	07d9      	lsls	r1, r3, #31
 80042ac:	bf44      	itt	mi
 80042ae:	f043 0320 	orrmi.w	r3, r3, #32
 80042b2:	6023      	strmi	r3, [r4, #0]
 80042b4:	b91d      	cbnz	r5, 80042be <_printf_i+0x196>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f023 0320 	bic.w	r3, r3, #32
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	2310      	movs	r3, #16
 80042c0:	e7b0      	b.n	8004224 <_printf_i+0xfc>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	f043 0320 	orr.w	r3, r3, #32
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	2378      	movs	r3, #120	; 0x78
 80042cc:	4828      	ldr	r0, [pc, #160]	; (8004370 <_printf_i+0x248>)
 80042ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042d2:	e7e3      	b.n	800429c <_printf_i+0x174>
 80042d4:	065e      	lsls	r6, r3, #25
 80042d6:	bf48      	it	mi
 80042d8:	b2ad      	uxthmi	r5, r5
 80042da:	e7e6      	b.n	80042aa <_printf_i+0x182>
 80042dc:	4616      	mov	r6, r2
 80042de:	e7bb      	b.n	8004258 <_printf_i+0x130>
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	6826      	ldr	r6, [r4, #0]
 80042e4:	6960      	ldr	r0, [r4, #20]
 80042e6:	1d1d      	adds	r5, r3, #4
 80042e8:	600d      	str	r5, [r1, #0]
 80042ea:	0635      	lsls	r5, r6, #24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	d501      	bpl.n	80042f4 <_printf_i+0x1cc>
 80042f0:	6018      	str	r0, [r3, #0]
 80042f2:	e002      	b.n	80042fa <_printf_i+0x1d2>
 80042f4:	0671      	lsls	r1, r6, #25
 80042f6:	d5fb      	bpl.n	80042f0 <_printf_i+0x1c8>
 80042f8:	8018      	strh	r0, [r3, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	4616      	mov	r6, r2
 8004300:	e7ba      	b.n	8004278 <_printf_i+0x150>
 8004302:	680b      	ldr	r3, [r1, #0]
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	600a      	str	r2, [r1, #0]
 8004308:	681e      	ldr	r6, [r3, #0]
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	2100      	movs	r1, #0
 800430e:	4630      	mov	r0, r6
 8004310:	f7fb ff66 	bl	80001e0 <memchr>
 8004314:	b108      	cbz	r0, 800431a <_printf_i+0x1f2>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	6060      	str	r0, [r4, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004324:	e7a8      	b.n	8004278 <_printf_i+0x150>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	4632      	mov	r2, r6
 800432a:	4649      	mov	r1, r9
 800432c:	4640      	mov	r0, r8
 800432e:	47d0      	blx	sl
 8004330:	3001      	adds	r0, #1
 8004332:	d0ab      	beq.n	800428c <_printf_i+0x164>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	079b      	lsls	r3, r3, #30
 8004338:	d413      	bmi.n	8004362 <_printf_i+0x23a>
 800433a:	68e0      	ldr	r0, [r4, #12]
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	4298      	cmp	r0, r3
 8004340:	bfb8      	it	lt
 8004342:	4618      	movlt	r0, r3
 8004344:	e7a4      	b.n	8004290 <_printf_i+0x168>
 8004346:	2301      	movs	r3, #1
 8004348:	4632      	mov	r2, r6
 800434a:	4649      	mov	r1, r9
 800434c:	4640      	mov	r0, r8
 800434e:	47d0      	blx	sl
 8004350:	3001      	adds	r0, #1
 8004352:	d09b      	beq.n	800428c <_printf_i+0x164>
 8004354:	3501      	adds	r5, #1
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	9903      	ldr	r1, [sp, #12]
 800435a:	1a5b      	subs	r3, r3, r1
 800435c:	42ab      	cmp	r3, r5
 800435e:	dcf2      	bgt.n	8004346 <_printf_i+0x21e>
 8004360:	e7eb      	b.n	800433a <_printf_i+0x212>
 8004362:	2500      	movs	r5, #0
 8004364:	f104 0619 	add.w	r6, r4, #25
 8004368:	e7f5      	b.n	8004356 <_printf_i+0x22e>
 800436a:	bf00      	nop
 800436c:	08004635 	.word	0x08004635
 8004370:	08004646 	.word	0x08004646

08004374 <memcpy>:
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	f100 33ff 	add.w	r3, r0, #4294967295
 800437c:	d100      	bne.n	8004380 <memcpy+0xc>
 800437e:	4770      	bx	lr
 8004380:	b510      	push	{r4, lr}
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800438a:	4291      	cmp	r1, r2
 800438c:	d1f9      	bne.n	8004382 <memcpy+0xe>
 800438e:	bd10      	pop	{r4, pc}

08004390 <memmove>:
 8004390:	4288      	cmp	r0, r1
 8004392:	b510      	push	{r4, lr}
 8004394:	eb01 0402 	add.w	r4, r1, r2
 8004398:	d902      	bls.n	80043a0 <memmove+0x10>
 800439a:	4284      	cmp	r4, r0
 800439c:	4623      	mov	r3, r4
 800439e:	d807      	bhi.n	80043b0 <memmove+0x20>
 80043a0:	1e43      	subs	r3, r0, #1
 80043a2:	42a1      	cmp	r1, r4
 80043a4:	d008      	beq.n	80043b8 <memmove+0x28>
 80043a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ae:	e7f8      	b.n	80043a2 <memmove+0x12>
 80043b0:	4402      	add	r2, r0
 80043b2:	4601      	mov	r1, r0
 80043b4:	428a      	cmp	r2, r1
 80043b6:	d100      	bne.n	80043ba <memmove+0x2a>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043c2:	e7f7      	b.n	80043b4 <memmove+0x24>

080043c4 <_free_r>:
 80043c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d048      	beq.n	800445c <_free_r+0x98>
 80043ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ce:	9001      	str	r0, [sp, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f1a1 0404 	sub.w	r4, r1, #4
 80043d6:	bfb8      	it	lt
 80043d8:	18e4      	addlt	r4, r4, r3
 80043da:	f000 f8d3 	bl	8004584 <__malloc_lock>
 80043de:	4a20      	ldr	r2, [pc, #128]	; (8004460 <_free_r+0x9c>)
 80043e0:	9801      	ldr	r0, [sp, #4]
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	4615      	mov	r5, r2
 80043e6:	b933      	cbnz	r3, 80043f6 <_free_r+0x32>
 80043e8:	6063      	str	r3, [r4, #4]
 80043ea:	6014      	str	r4, [r2, #0]
 80043ec:	b003      	add	sp, #12
 80043ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f2:	f000 b8cd 	b.w	8004590 <__malloc_unlock>
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	d90b      	bls.n	8004412 <_free_r+0x4e>
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	1862      	adds	r2, r4, r1
 80043fe:	4293      	cmp	r3, r2
 8004400:	bf04      	itt	eq
 8004402:	681a      	ldreq	r2, [r3, #0]
 8004404:	685b      	ldreq	r3, [r3, #4]
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	bf04      	itt	eq
 800440a:	1852      	addeq	r2, r2, r1
 800440c:	6022      	streq	r2, [r4, #0]
 800440e:	602c      	str	r4, [r5, #0]
 8004410:	e7ec      	b.n	80043ec <_free_r+0x28>
 8004412:	461a      	mov	r2, r3
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b10b      	cbz	r3, 800441c <_free_r+0x58>
 8004418:	42a3      	cmp	r3, r4
 800441a:	d9fa      	bls.n	8004412 <_free_r+0x4e>
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	1855      	adds	r5, r2, r1
 8004420:	42a5      	cmp	r5, r4
 8004422:	d10b      	bne.n	800443c <_free_r+0x78>
 8004424:	6824      	ldr	r4, [r4, #0]
 8004426:	4421      	add	r1, r4
 8004428:	1854      	adds	r4, r2, r1
 800442a:	42a3      	cmp	r3, r4
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	d1dd      	bne.n	80043ec <_free_r+0x28>
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	6053      	str	r3, [r2, #4]
 8004436:	4421      	add	r1, r4
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	e7d7      	b.n	80043ec <_free_r+0x28>
 800443c:	d902      	bls.n	8004444 <_free_r+0x80>
 800443e:	230c      	movs	r3, #12
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	e7d3      	b.n	80043ec <_free_r+0x28>
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	1961      	adds	r1, r4, r5
 8004448:	428b      	cmp	r3, r1
 800444a:	bf04      	itt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	bf04      	itt	eq
 8004454:	1949      	addeq	r1, r1, r5
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	6054      	str	r4, [r2, #4]
 800445a:	e7c7      	b.n	80043ec <_free_r+0x28>
 800445c:	b003      	add	sp, #12
 800445e:	bd30      	pop	{r4, r5, pc}
 8004460:	20000090 	.word	0x20000090

08004464 <_malloc_r>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	1ccd      	adds	r5, r1, #3
 8004468:	f025 0503 	bic.w	r5, r5, #3
 800446c:	3508      	adds	r5, #8
 800446e:	2d0c      	cmp	r5, #12
 8004470:	bf38      	it	cc
 8004472:	250c      	movcc	r5, #12
 8004474:	2d00      	cmp	r5, #0
 8004476:	4606      	mov	r6, r0
 8004478:	db01      	blt.n	800447e <_malloc_r+0x1a>
 800447a:	42a9      	cmp	r1, r5
 800447c:	d903      	bls.n	8004486 <_malloc_r+0x22>
 800447e:	230c      	movs	r3, #12
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	2000      	movs	r0, #0
 8004484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004486:	f000 f87d 	bl	8004584 <__malloc_lock>
 800448a:	4921      	ldr	r1, [pc, #132]	; (8004510 <_malloc_r+0xac>)
 800448c:	680a      	ldr	r2, [r1, #0]
 800448e:	4614      	mov	r4, r2
 8004490:	b99c      	cbnz	r4, 80044ba <_malloc_r+0x56>
 8004492:	4f20      	ldr	r7, [pc, #128]	; (8004514 <_malloc_r+0xb0>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b923      	cbnz	r3, 80044a2 <_malloc_r+0x3e>
 8004498:	4621      	mov	r1, r4
 800449a:	4630      	mov	r0, r6
 800449c:	f000 f862 	bl	8004564 <_sbrk_r>
 80044a0:	6038      	str	r0, [r7, #0]
 80044a2:	4629      	mov	r1, r5
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f85d 	bl	8004564 <_sbrk_r>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	d123      	bne.n	80044f6 <_malloc_r+0x92>
 80044ae:	230c      	movs	r3, #12
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 f86c 	bl	8004590 <__malloc_unlock>
 80044b8:	e7e3      	b.n	8004482 <_malloc_r+0x1e>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	1b5b      	subs	r3, r3, r5
 80044be:	d417      	bmi.n	80044f0 <_malloc_r+0x8c>
 80044c0:	2b0b      	cmp	r3, #11
 80044c2:	d903      	bls.n	80044cc <_malloc_r+0x68>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	441c      	add	r4, r3
 80044c8:	6025      	str	r5, [r4, #0]
 80044ca:	e004      	b.n	80044d6 <_malloc_r+0x72>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	42a2      	cmp	r2, r4
 80044d0:	bf0c      	ite	eq
 80044d2:	600b      	streq	r3, [r1, #0]
 80044d4:	6053      	strne	r3, [r2, #4]
 80044d6:	4630      	mov	r0, r6
 80044d8:	f000 f85a 	bl	8004590 <__malloc_unlock>
 80044dc:	f104 000b 	add.w	r0, r4, #11
 80044e0:	1d23      	adds	r3, r4, #4
 80044e2:	f020 0007 	bic.w	r0, r0, #7
 80044e6:	1ac2      	subs	r2, r0, r3
 80044e8:	d0cc      	beq.n	8004484 <_malloc_r+0x20>
 80044ea:	1a1b      	subs	r3, r3, r0
 80044ec:	50a3      	str	r3, [r4, r2]
 80044ee:	e7c9      	b.n	8004484 <_malloc_r+0x20>
 80044f0:	4622      	mov	r2, r4
 80044f2:	6864      	ldr	r4, [r4, #4]
 80044f4:	e7cc      	b.n	8004490 <_malloc_r+0x2c>
 80044f6:	1cc4      	adds	r4, r0, #3
 80044f8:	f024 0403 	bic.w	r4, r4, #3
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d0e3      	beq.n	80044c8 <_malloc_r+0x64>
 8004500:	1a21      	subs	r1, r4, r0
 8004502:	4630      	mov	r0, r6
 8004504:	f000 f82e 	bl	8004564 <_sbrk_r>
 8004508:	3001      	adds	r0, #1
 800450a:	d1dd      	bne.n	80044c8 <_malloc_r+0x64>
 800450c:	e7cf      	b.n	80044ae <_malloc_r+0x4a>
 800450e:	bf00      	nop
 8004510:	20000090 	.word	0x20000090
 8004514:	20000094 	.word	0x20000094

08004518 <_realloc_r>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	4607      	mov	r7, r0
 800451c:	4614      	mov	r4, r2
 800451e:	460e      	mov	r6, r1
 8004520:	b921      	cbnz	r1, 800452c <_realloc_r+0x14>
 8004522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004526:	4611      	mov	r1, r2
 8004528:	f7ff bf9c 	b.w	8004464 <_malloc_r>
 800452c:	b922      	cbnz	r2, 8004538 <_realloc_r+0x20>
 800452e:	f7ff ff49 	bl	80043c4 <_free_r>
 8004532:	4625      	mov	r5, r4
 8004534:	4628      	mov	r0, r5
 8004536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004538:	f000 f830 	bl	800459c <_malloc_usable_size_r>
 800453c:	42a0      	cmp	r0, r4
 800453e:	d20f      	bcs.n	8004560 <_realloc_r+0x48>
 8004540:	4621      	mov	r1, r4
 8004542:	4638      	mov	r0, r7
 8004544:	f7ff ff8e 	bl	8004464 <_malloc_r>
 8004548:	4605      	mov	r5, r0
 800454a:	2800      	cmp	r0, #0
 800454c:	d0f2      	beq.n	8004534 <_realloc_r+0x1c>
 800454e:	4631      	mov	r1, r6
 8004550:	4622      	mov	r2, r4
 8004552:	f7ff ff0f 	bl	8004374 <memcpy>
 8004556:	4631      	mov	r1, r6
 8004558:	4638      	mov	r0, r7
 800455a:	f7ff ff33 	bl	80043c4 <_free_r>
 800455e:	e7e9      	b.n	8004534 <_realloc_r+0x1c>
 8004560:	4635      	mov	r5, r6
 8004562:	e7e7      	b.n	8004534 <_realloc_r+0x1c>

08004564 <_sbrk_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d06      	ldr	r5, [pc, #24]	; (8004580 <_sbrk_r+0x1c>)
 8004568:	2300      	movs	r3, #0
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fc ff22 	bl	80013b8 <_sbrk>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_sbrk_r+0x1a>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_sbrk_r+0x1a>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	20000170 	.word	0x20000170

08004584 <__malloc_lock>:
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <__malloc_lock+0x8>)
 8004586:	f000 b811 	b.w	80045ac <__retarget_lock_acquire_recursive>
 800458a:	bf00      	nop
 800458c:	20000178 	.word	0x20000178

08004590 <__malloc_unlock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_unlock+0x8>)
 8004592:	f000 b80c 	b.w	80045ae <__retarget_lock_release_recursive>
 8004596:	bf00      	nop
 8004598:	20000178 	.word	0x20000178

0800459c <_malloc_usable_size_r>:
 800459c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a0:	1f18      	subs	r0, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bfbc      	itt	lt
 80045a6:	580b      	ldrlt	r3, [r1, r0]
 80045a8:	18c0      	addlt	r0, r0, r3
 80045aa:	4770      	bx	lr

080045ac <__retarget_lock_acquire_recursive>:
 80045ac:	4770      	bx	lr

080045ae <__retarget_lock_release_recursive>:
 80045ae:	4770      	bx	lr

080045b0 <_init>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr

080045bc <_fini>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr
